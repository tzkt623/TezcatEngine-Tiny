#TINY_HEAD_BEGIN
{
    str Name = Unlit/EnvMakeIrradiance;
}
#TINY_HEAD_END

#TINY_PASS_BEGIN
{
    #TINY_CFG_BEGIN
    {
        int Version = 330;
        int OrderID = 50;
        str Queue = Prepare;
        str DepthTest = Off;
        bool ZWrite = true;
        str CullFace = Front;
    }
    #TINY_CFG_END

    #TINY_VS_BEGIN
    {
        #include "../Include/tiny_vs.tyin"

        TINY_LAYOUT_POSITION;
        out float3 myWorldPosition;

        void main()
        {
            myWorldPosition = tiny_layout_Position;
            gl_Position = TINY_SkyBox_MatrixP * TINY_SkyBox_MatrixV[TINY_SkyBox_ViewIndex] * float4(tiny_layout_Position, 1.0);
        }
    }
    #TINY_VS_END

    #TINY_FS_BEGIN
    {
        #include "../Include/tiny_fs.tyin"
        
        in float3 myWorldPosition;
        out float4 myFinalColor;

        void main()
        {		
            // The world floattor acts as the normal of a tangent surface
            // from the origin, aligned to WorldPos. Given this normal, calculate all
            // incoming radiance of the environment. The result of this radiance
            // is the radiance of light coming from -Normal direction, which is what
            // we use in the PBR shader to sample irradiance.
            float3 N = normalize(myWorldPosition);

            float3 irradiance = float3(0.0);   
            
            // tangent space calculation from origin point
            float3 up = float3(0.0, 1.0, 0.0);
            float3 right = normalize(cross(up, N));
            up = normalize(cross(N, right));
            
            //float sampleDelta = 0.025;
            float sampleDelta = 0.025;
            int nrSamples = 0;
            for(float phi = 0.0; phi < 2.0 * TINY_PI; phi += sampleDelta)
            {
                for(float theta = 0.0; theta < 0.5 * TINY_PI; theta += sampleDelta)
                {
                    // spherical to cartesian (in tangent space)
                    float3 tangentSample = float3(sin(theta) * cos(phi),  sin(theta) * sin(phi), cos(theta));
                    // tangent space to world
                    float3 samplefloat = tangentSample.x * right + tangentSample.y * up + tangentSample.z * N; 

                    irradiance += texture(TINY_TexSkybox, samplefloat).rgb * cos(theta) * sin(theta);
                    nrSamples++;
                }
            }
            irradiance = TINY_PI * irradiance * (1.0 / float(nrSamples));
            
            myFinalColor = float4(irradiance, 1.0);
            //myFinalColor = float4(1.0, 0.0, 0.0, 1.0);
        }
    }
    #TINY_FS_END
}
#TINY_PASS_END
