#TINY_HEAD_BEGIN
{
    str Name = Unlit/Skybox;
}
#TINY_HEAD_END

#TINY_PASS_BEGIN
{
    #TINY_CFG_BEGIN
    {
        int Version = 330;
        int OrderID = 0;
        str Queue = Background;
        str DepthTest = LessEqual;
        bool ZWrite = false;
        str CullFace = Back;
    }
    #TINY_CFG_END

    #TINY_VS_BEGIN
    {
        #include "../Include/tiny_vs.tyin"

        TINY_LAYOUT_POSITION;
        out float3 myUV;

        void main()
        {
            myUV = tiny_layout_Position;
            //myUV.yz = -myUV.yz;
            gl_Position = TINY_MatrixP * mat4(mat3(TINY_MatrixV)) * float4(tiny_layout_Position, 1.0);
        }
    }
    #TINY_VS_END

    #TINY_FS_BEGIN
    {
        #include "../Include/tiny_fs.tyin"
        
        in float3 myUV;
        [Editor(IsHDR)]
        uniform bool myIsHDR;
        [Editor(LOD)]
        uniform float myLod = 0.0f;
        uniform float myExposure = 0.0f;
        out float4 myFinalColor;

        void main()
        {
            const float gamma = 2.2f;
            float exposure = 0.2;
            //float3 color = texture(TINY_TexCube, myUV).rgb;
            float3 color = textureLod(TINY_TexSkybox, myUV, myLod).rgb;
            if(myIsHDR)
            {
                //color = color / (color + float3(1.0));
                //color = color * pow(2.0f, myExposure);
                color = float3(1.0) - exp(-color * myExposure);
                color = pow(color, float3(1.0 / gamma));
            }
            //color = vec3(1.0,0.0,1.0);
            myFinalColor = float4(color, 1.0);
            //myFinalColor = float4(1.0, 0.0, 0.0, 1.0);
        }
    }
    #TINY_FS_END
}
#TINY_PASS_END










