#TINY_HEAD_BEGIN
{
    str Name = Unlit/ObjectID;
}
#TINY_HEAD_END

#TINY_PASS_BEGIN
{
    #TINY_CFG_BEGIN
    {
        int Version = 330;
        int OrderID = 50;
        str Queue = Opaque;
        str DepthTest = Less;
        bool ZWrite = true;
        str CullFace = Back;
        str LightMode = Forward;
    }
    #TINY_CFG_END

    #TINY_VS_BEGIN
    {
        #include "../Include/tiny_vs.tyin"

        TINY_LAYOUT_POSITION;

        out float3 myWorldPosition;
        flat out uint outObjectID;

        uniform uint myObjectID;

        void main()
        {
            outObjectID = myObjectID;
            float4 position =  float4(tiny_layout_Position, 1.0);
            gl_Position = TINY_MatrixP * TINY_MatrixV * TINY_MatrixM * position;
        }
    }
    #TINY_VS_END

    #TINY_FS_BEGIN
    {
        #include "../Include/tiny_fs.tyin"

        flat in uint outObjectID;
        //out uint4 myFinalColor;
        //out float4 myFinalColor;

        const uint _16 = 16u;
        const uint _8 = 8u;
        const uint _0xFF = 0xFFu;

        layout (location = 0) out uint myIDColor;
        layout (location = 1) out float4 myIDViewerColor;

        void main()
        {
            //int id = (int)outObjectID;

            myIDColor = outObjectID;

            if(outObjectID > 0u)
            {
                float3 idColor = float3
                (
                    float((outObjectID >> _16) & _0xFF) / 255.0,
                    float((outObjectID >> _8) & _0xFF) / 255.0,
                    float(outObjectID & _0xFF) / 255.0
                );
                myIDViewerColor = float4(1.0, 0.0, 1.0, 1.0);
            }
            else
            {
                myIDViewerColor = float4(0.0, 0.0, 0.0, 1.0);
            }
            //myIDViewerColor = float4(idColor, 0);
            //myFinalColor = uint4(outObjectID, 0, 0, 0);
        }
    }
    #TINY_FS_END
}
#TINY_PASS_END

































