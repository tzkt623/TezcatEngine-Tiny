#TINY_HEAD_BEGIN
{
    str Name = Standard/PBRTest1;
}
#TINY_HEAD_END

#TINY_PASS_BEGIN
{
    #TINY_CFG_BEGIN
    {
        int Version = 330;
        int OrderID = 0;
        str LightMode = Forward;
        str Queue = Opaque;
        str DepthTest = LessEqual;
        bool ZWrite = true;
        str CullFace = Back;
        bool Blend = false;
    }
    #TINY_CFG_END

    #TINY_VS_BEGIN
    {
        #include "../Include/tiny_vs.tyin"

        TINY_LAYOUT_POSITION;
        TINY_LAYOUT_NORMAL;
        TINY_LAYOUT_UV;
        TINY_LAYOUT_COLOR;

        out float4 myColor;
        out float2 myUV;
        out float3 myNormal;
        out float3 myWorldPosition;
        out float4 myLightPosition;

        void main()
        {
            float4 position = TINY_MatrixM * float4(tiny_layout_Position, 1.0);

            myColor = tiny_layout_Color;
            myUV = tiny_layout_UV;
            myNormal = normalize(TINY_MatrixN * tiny_layout_Normal);
            myWorldPosition = float3(position);
            myLightPosition = TINY_MatrixLightVP * float4(myWorldPosition, 1.0f);

            gl_Position = TINY_MatrixP * TINY_MatrixV * position;
        }
    }
    #TINY_VS_END

    #TINY_FS_BEGIN
    {
        #include "../Include/tiny_fs.tyin"
        #include "../Include/tiny_fs_pbr.tyin"

        in float4 myColor;
        in float2 myUV;
        in float3 myNormal;
        in float3 myWorldPosition;
        in float4 myLightPosition;
        
        out float4 myFinalColor;

        uniform TinyPBR_Test myPBR;

        void main()
        {
            float3 albedo = myPBR.albedo;
            float metallic = myPBR.metallic;
            float roughness = myPBR.roughness;
            float ao = myPBR.ao;

            float3 N = myNormal;
            float3 V = normalize(TINY_CameraWorldPosition - myWorldPosition);
            float3 R = reflect(-V, N);

            float3 F0 = float3(0.04); 
            F0 = mix(F0, albedo, metallic);

            float3 L = normalize(-TINY_LitDir.direction);
            float3 H = normalize(V + L);

            //计算一个灯的光照
            float3 Lo = float3(0.0);
            {

                float cosTheta = max(dot(N, L), 0.0);
                float3 radiance = TINY_LitDir.diffuse * cosTheta * 10;

                float NdotH = max(dot(N, H), 0.0);
                float NDF = distributionGGX(NdotH, roughness);
                float G = geometrySmith(N, V, L, roughness);
                float3 F = fresnelSchlick(max(dot(H, V), 0.0), F0);

                float3 kS = F;
                float3 kD = float3(1.0) - kS;
                kD *= 1.0 - metallic;

                float3 nominator = NDF * G * F;
                float denominator = 4.0 * max(dot(N, V), 0.0) * max(dot(N, L), 0.0) + 0.001; 
                float3 specular = nominator / denominator;

                // add to outgoing radiance Lo
                float NdotL = max(dot(N, L), 0.0);
                Lo += (kD * albedo / TINY_PI + specular) * radiance * NdotL; 
            }

            float3 F = fresnelSchlickRoughness(max(dot(N, V), 0.0), F0, roughness);
    
            float3 kS = F;
            float3 kD = 1.0 - kS;
            kD *= 1.0 - metallic;

            float3 irradiance = texture(TINY_TexIrradiance, N).rgb;
            float3 diffuse = irradiance * albedo;

            const float MAX_REFLECTION_LOD = 4.0;
            float3 prefilteredColor = textureLod(TINY_TexPrefilter, R, roughness * MAX_REFLECTION_LOD).rgb;    
            float2 brdf = texture(TINY_TexBRDFLUT, float2(max(dot(N, V) - 0.001f, 0.0), roughness)).rg;
            float3 specular = prefilteredColor * (F * brdf.x + brdf.y);

            float3 ambient = (kD * diffuse + specular) * ao;

            //float3 ambient = (kD * diffuse) * ao;

            float3 color = ambient + Lo;

            color = color / (color + float3(1.0));
            color = pow(color, float3(1.0 / 2.2)); 

            //color = (1 - shadow) * color;

            float shadow = calcShadow(myLightPosition, N, normalize(-TINY_LitDir.direction), TINY_TexShadow);

            //myFinalColor = float4(color, 1.0) * myColor;
            myFinalColor = float4(color, 1.0) * myColor * (1.0 - shadow);
            //myFinalColor = float4(specular, 1.0);
            //myFinalColor = float4(R, 1.0);
            //myFinalColor = float4(brdf.x, brdf.y, 0.0, 1.0);     
        }
    }
    #TINY_FS_END
}
#TINY_PASS_END








