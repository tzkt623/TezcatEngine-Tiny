#TINY_HEAD_BEGIN
{
    str Name = Hide/ShowNormals;
}
#TINY_HEAD_END

#TINY_PASS_BEGIN
{
    #TINY_CFG_BEGIN
    {
        int Version = 330;
        int OrderID = 0;
        str Queue = Post;
        str DepthTest = Less;
        bool ZWrite = true;
        str CullFace = Back;
    }
    #TINY_CFG_END

    #TINY_VS_BEGIN
    {
        #include "../Include/tiny_vs.tyin"

        TINY_LAYOUT_POSITION;
        TINY_LAYOUT_NORMAL;

        out VS_OUT
        {
            float3 normal;
        } vs_out;
        void main()
        {
            gl_Position = TINY_MatrixM * float4(tiny_layout_Position, 1.0f);
            vs_out.normal = normalize(TINY_MatrixN * tiny_layout_Normal);
        }
    }
    #TINY_VS_END

    #TINY_GS_BEGIN
    {
        #include "../Include/tiny_vs.tyin"

        layout (triangles) in;
        layout (line_strip, max_vertices = 6) out; // 每个三角形生成3条法线

        in VS_OUT
        {
            float3 normal;
        } gs_in[];

        //@[Editor(NormalLength)]
        uniform float myNormalLength; // 法线显示长度

        void drawNormalLine(int index)
        {
            float4 begin = TINY_MatrixVP * gl_in[index].gl_Position;
            
            float4 end = TINY_MatrixVP * (gl_in[index].gl_Position + float4(gs_in[index].normal * myNormalLength, 0.0f));
            
            gl_Position = begin;
            EmitVertex();
            gl_Position = end;
            EmitVertex();
            EndPrimitive();
        }

        void main()
        {
            drawNormalLine(0);
            drawNormalLine(1);
            drawNormalLine(2);
        }
    }
    #TINY_GS_END

    #TINY_FS_BEGIN
    {
        #include "../Include/tiny_config.tyin"

        out float4 myFinalColor;

        void main()
        {
            myFinalColor = float4(1.0f, 0.0f, 0.0f, 1.0f);
        } 
    }
    #TINY_FS_END
}
#TINY_PASS_END



