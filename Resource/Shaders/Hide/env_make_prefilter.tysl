#TINY_HEAD_BEGIN
{
    str Name = Hide/EnvMakePrefilter;
}
#TINY_HEAD_END

#TINY_PASS_BEGIN
{
    #TINY_CFG_BEGIN
    {
        int Version = 400;
        int OrderID = 2;
        str Queue = Prepare;
        str DepthTest = Off;
        bool ZWrite = true;
        str CullFace = Front;
    }
    #TINY_CFG_END

    #TINY_VS_BEGIN
    {
        #include "../Include/tiny_vs.tyin"

        TINY_LAYOUT_POSITION;
        out float3 myWorldPosition;

        void main()
        {
            myWorldPosition = tiny_layout_Position;
            gl_Position = TINY_SkyBox_MatrixP * TINY_SkyBox_MatrixV[TINY_SkyBox_ViewIndex] * float4(tiny_layout_Position, 1.0);
        }
    }
    #TINY_VS_END

    #TINY_FS_BEGIN
    {
        #include "../Include/tiny_fs.tyin"
        #include "../Include/tiny_fs_pbr.tyin"
        
        in float3 myWorldPosition;
        out float4 myFinalColor;

        //uniform float myRoughness;
        //uniform int myResolution;

        void main()
        {       
            float3 N = normalize(myWorldPosition);
            float3 R = N;
            float3 V = R;

            const uint SAMPLE_COUNT = 256u;
            float totalWeight = 0.0;
            float3 prefilteredColor = float3(0.0);

            for(uint i = 0u; i < SAMPLE_COUNT; ++i)
            {
                // generates a sample floattor that's biased towards the preferred alignment direction (importance sampling).
                float2 Xi = hammersley(i, SAMPLE_COUNT);
                float3 H = importanceSampleGGX(Xi, N, TINY_SkyBox_Roughness);
                float3 L = normalize(2.0 * dot(V, H) * H - V);
                //float3 L = reflect(-V, H);
                float NdotL = max(dot(N, L), 0.0);
                
                if(NdotL > 0.0)
                {
                	float NdotH = max(dot(N, H), 0.0);
                    float HdotV = max(dot(H, V), 0.0);
                    float D = distributionGGX(NdotH, TINY_SkyBox_Roughness);
                    // sample from the environment's mip level based on myRoughness/pdf
                    float pdf = D * NdotH / (4.0 * HdotV + 0.0001f);
                    
                    
                    //float myResolution = 1024.0; // myResolution of source cubemap (per face)
                    float saTexel = 4.0 * TINY_PI / (6.0 * TINY_SkyBox_Resolution * TINY_SkyBox_Resolution);
                    float saSample = 1.0 / (float(SAMPLE_COUNT) * pdf + 0.001f);
                    float mipLevel = TINY_SkyBox_Roughness == 0.0 ? 0.0 : 0.5 * log2(saSample / saTexel);
                    
                    prefilteredColor += textureLod(TINY_SkyBox_TexCube, L, mipLevel).rgb * NdotL;
                    totalWeight += NdotL;
                }
            }
            
            prefilteredColor /= totalWeight;
            myFinalColor = float4(prefilteredColor, 1.0);
        } 
    }
    #TINY_FS_END
}
#TINY_PASS_END













