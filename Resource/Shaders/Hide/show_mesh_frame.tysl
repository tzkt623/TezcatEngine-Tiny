#TINY_HEAD_BEGIN
{
    str Name = Hide/ShowMeshFrame;
}
#TINY_HEAD_END

#TINY_PASS_BEGIN
{
    #TINY_CFG_BEGIN
    {
        int Version = 330;
        int OrderID = 0;
        bool Blend = true;
        str BlendSrc = 1;
        str BlendTar = 0;
        str Queue = Post;
        str DepthTest = LessEqual;
        bool ZWrite = true;
        str CullFace = Back;
    }
    #TINY_CFG_END

    #TINY_VS_BEGIN
    {
        #include "../Include/tiny_vs.tyin"

        TINY_LAYOUT_POSITION;

        void main()
        {
            gl_Position = TINY_MatrixVP * TINY_MatrixM * float4(tiny_layout_Position, 1.0f);
        }
    }
    #TINY_VS_END
    
    
    #TINY_GS_BEGIN
    {
        #include "../Include/tiny_vs.tyin"

        layout(triangles) in; // 输入线段
        layout(triangle_strip, max_vertices=12) out; // 输出四边形（4顶点）

        uniform float myLineWidth = 0.001; // 线宽（像素）
        uniform float2 myViewPortSize;

        void drawLine(int begin, int end)
        {
            float4 p0 = gl_in[begin].gl_Position;
            float4 p1 = gl_in[end].gl_Position;

            // 计算线段方向（屏幕空间）
            float2 screenP0 = (p0.xy / p0.w) * myViewPortSize;
            float2 screenP1 = (p1.xy / p1.w) * myViewPortSize;
            float2 dir = normalize(screenP1 - screenP0);

            // 计算垂直方向（屏幕空间）
            float2 perp = float2(-dir.y, dir.x);
            perp *= myLineWidth; // 转换为NDC偏移

            // 生成四边形顶点
            gl_Position = p0 + float4(perp * p0.w, 0, 0); // 上侧顶点
            EmitVertex();

            gl_Position = p0 - float4(perp * p0.w, 0, 0); // 下侧顶点
            EmitVertex();

            gl_Position = p1 + float4(perp * p1.w, 0, 0); // 上侧顶点
            EmitVertex();

            gl_Position = p1 - float4(perp * p1.w, 0, 0); // 下侧顶点
            EmitVertex();

            EndPrimitive();
        }

        void main()
        {
            drawLine(0, 1);
            drawLine(1, 2);
            drawLine(2, 0);
        }
    }
    #TINY_GS_END
    

    #TINY_FS_BEGIN
    {
        #include "../Include/tiny_config.tyin"

        out float4 myFinalColor;

        void main()
        {
            myFinalColor = float4(0.0f, 0.0f, 0.0f, 1.0f);
        } 
    }
    #TINY_FS_END
}
#TINY_PASS_END






