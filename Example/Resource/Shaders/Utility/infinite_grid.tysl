#TINY_HEAD_BEGIN
{
    str Name = Utility/InfiniteGrid;
}
#TINY_HEAD_END

#TINY_PASS_BEGIN
{
    #TINY_CFG_BEGIN
    {
        str Name = Utility/InfiniteGrid;
        int Version = 330;
        int OrderID = 600;
        str Queue = Transparent;
        str DepthTest = Less;
        bool ZWrite = true;
        bool Blend = true;
        str BlendSrc = SrcA;
        str BlendTar = 1-SrcA;
        str CullFace = Off;
    }
    #TINY_CFG_END

    #TINY_VS_BEGIN
    {
        #include "../Include/tiny_vs.tyin"

        layout (location = 0) in float3 aPos;

        out float3 nearPoint;
        out float3 farPoint;

        out float4x4 fragView;
        out float4x4 fragProj;

        float3 unprojectPoint(float x, float y, float z, float4x4 view, float4x4 projection)
        {
            float4x4 viewInv = inverse(view);
            float4x4 projInv = inverse(projection);
            float4 unprojectedPoint =  viewInv * projInv * float4(x, y, z, 1.0);
            return unprojectedPoint.xyz / unprojectedPoint.w;
        }

        void main()
        {
            nearPoint = unprojectPoint(aPos.x, aPos.y, 0.0, TINY_MatrixV, TINY_MatrixP);
            farPoint = unprojectPoint(aPos.x, aPos.y, 1.0, TINY_MatrixV, TINY_MatrixP);
            fragView = TINY_MatrixV;
            fragProj = TINY_MatrixP;

            gl_Position = float4(aPos, 1.0);
        }
    }
    #TINY_VS_END

    #TINY_FS_BEGIN
    {
        #include "../Include/tiny_fs.tyin"

        in float3 nearPoint;
        in float3 farPoint;
        in float4x4 fragView;
        in float4x4 fragProj;

        out float4 myGridColor;

        float4 grid(float3 fragPos3D, float scale)
        {
            float2 coord = fragPos3D.xz * scale; // use the scale variable to set the distance between the lines
            float2 derivative = fwidth(coord);
            float2 grid = abs(fract(coord - 0.5) - 0.5) / derivative;
            float line = min(grid.x, grid.y);
            float minimumz = min(derivative.y, 1);
            float minimumx = min(derivative.x, 1);
            float4 color = float4(0.2, 0.2, 0.2, 1.0 - min(line, 1.0));
            // z axis
            if(fragPos3D.x > -0.1 * minimumx && fragPos3D.x < 0.1 * minimumx)
                color.z = 1.0;
            // x axis
            if(fragPos3D.z > -0.1 * minimumz && fragPos3D.z < 0.1 * minimumz)
                color.x = 1.0;
            return color;
        }

        float computeDepth(float3 pos)
        {
            float4 clip_space_pos = fragProj * fragView * float4(pos.xyz, 1.0);
            return (clip_space_pos.z / clip_space_pos.w);
        }

        float computeLinearDepth(float3 pos)
        {
            float4 clip_space_pos = fragProj * fragView * float4(pos.xyz, 1.0);
            float clip_space_depth = (clip_space_pos.z / clip_space_pos.w) * 2.0 - 1.0; // put back between -1 and 1
            float linearDepth = (2.0 * TINY_CameraNearFar.x * TINY_CameraNearFar.y) / (TINY_CameraNearFar.y + TINY_CameraNearFar.x - clip_space_depth * (TINY_CameraNearFar.y - TINY_CameraNearFar.x)); // get linear value between 0.01 and 100
            return linearDepth / TINY_CameraNearFar.y; // normalize
        }

        void main()
        {
            float t = -nearPoint.y / (farPoint.y - nearPoint.y);
            float3 fragPos3D = nearPoint + t * (farPoint - nearPoint);
            gl_FragDepth = computeDepth(fragPos3D);

            float linearDepth = computeLinearDepth(fragPos3D);
            float fading = max(0, (0.5 - linearDepth));

            //myGridColor = float4(float(t > 0), 0.0, 0.0, float(t > 0));
            myGridColor = (grid(fragPos3D, 0.01) + grid(fragPos3D, 0.01)) * float(t > 0);
            //myGridColor.a = fading;
        }
    }
    #TINY_FS_END
}
#TINY_PASS_END
















