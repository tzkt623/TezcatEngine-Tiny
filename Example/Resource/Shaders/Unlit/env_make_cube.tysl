#TINY_HEAD_BEGIN
{
    str Name = Unlit/EnvMakeCube;
}
#TINY_HEAD_END

#TINY_PASS_BEGIN
{
    #TINY_CFG_BEGIN
    {
        str Name = EnvMakeCube;
        int Version = 330;
        int OrderID = 50;
        str Queue = Prepare;
        str DepthTest = Off;
        bool ZWrite = true;
        str CullFace = Front;
    }
    #TINY_CFG_END

    #TINY_VS_BEGIN
    {
        #include "tiny_vs_base"

        layout (location = 0) in vec3 aPos;
        out vec3 myWorldPosition;

        void main()
        {
            myWorldPosition = aPos;
            gl_Position = TINY_MatrixP * TINY_MatrixV * vec4(aPos, 1.0);
        }
    }
    #TINY_VS_END

    #TINY_FS_BEGIN
    {
        #include "tiny_fs_texture"
        
        in vec3 myWorldPosition;
        out vec4 myFinalColor;

        const vec2 invAtan = vec2(0.1591, 0.3183);
        vec2 sampleSphericalMap(vec3 v)
        {
            vec2 uv = vec2(atan(v.z, v.x), asin(v.y));
            uv *= invAtan;
            uv += 0.5;
            return uv;
        }

        mat3 TBN(vec3 N, vec3 V)
        {
            vec3 tangent, bitangent;
            tangent = normalize(cross(N, vec3(0.0, 1.0, 0.0)));
            bitangent = cross(N, tangent);
            mat3 TBN = mat3(tangent, bitangent, N);
            return TBN;
        }

        vec3 newSample()
        {
            vec3 N = normalize(myWorldPosition);
            vec3 V = normalize(myWorldPosition);
            vec3 R = reflect(V, N);
            mat3 T = TBN(N, V);
            vec3 r = T * R;

            vec2 sampleUV;
            float majorAxis = max(abs(r.x), max(abs(r.y), abs(r.z)));
            if (majorAxis == abs(r.x))
            {
                if (r.x > 0.0)
                    sampleUV = vec2(-r.z, -r.y) / r.x;
                else
                    sampleUV = vec2(r.z, -r.y) / -r.x;
            }
            else if (majorAxis == abs(r.y))
            {
                if (r.y > 0.0)
                    sampleUV = vec2(r.x, r.z) / r.y;
                else
                    sampleUV = vec2(r.x, -r.z) / -r.y;
            }
            else
            {
                if (r.z > 0.0)
                    sampleUV = vec2(r.x, -r.y) / r.z;
                else
                    sampleUV = vec2(-r.x, -r.y) / -r.z;
            }

            sampleUV *= 0.5;
            sampleUV += 0.5;

            return texture(TINY_TexColor, sampleUV).rgb;
        }

        void main()
        {
            
            vec2 uv = sampleSphericalMap(normalize(myWorldPosition));
            vec3 color = texture(TINY_TexColor, uv).rgb;
            myFinalColor = vec4(color, 1.0f);
            

            //myFinalColor = vec4(newSample(), 1.0f);
        }
    }
    #TINY_FS_END
}
#TINY_PASS_END