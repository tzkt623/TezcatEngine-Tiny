#TINY_HEAD_BEGIN
{
    str Name = Unlit/GaussianBlur;
}
#TINY_HEAD_END

#TINY_PASS_BEGIN
{
    #TINY_CFG_BEGIN
    {
        str Name = Unlit/GaussianBlur;
        int Version = 330;
        int OrderID = 50;
        str Queue = Opaque;
        str DepthTest = Less;
        bool ZWrite = true;
        str DepthTest = Less;
        str CullFace = Off;
    }
    #TINY_CFG_END

    #TINY_VS_BEGIN
    {
        #include "../Include/tiny_vs_base.tyin"

        layout (location = 0) in vec3 aPos;
        layout (location = 2) in vec2 aUV;

        out vec2 myUV;

        void main()
        {
            gl_Position = TINY_MatrixP * TINY_MatrixV * TINY_MatrixM * vec4(aPos, 1.0);
            myUV = aUV;
        }
    }
    #TINY_VS_END

    #TINY_FS_BEGIN
    {
        #include "../Include/tiny_fs_texture.tyin"

        in vec2 myUV;
        out vec4 myFinalColor;

        const vec2 texSize = vec2(2048, 1024);
        const int radius = 5;
        const int kernelCount = (2 * radius + 1) * (2 * radius + 1);
        vec2 myOffset[kernelCount];
        float myFactor[kernelCount] = float[kernelCount]
        (
            0.00049242,
            0.00101164,
            0.00177106,
            0.00264211,
            0.00335878,
            0.00363852,
            0.00335878,
            0.00264211,
            0.00177106,
            0.00101164,
            0.00049242,
            0.00101164,
            0.00207836,
            0.00363852,
            0.00542804,
            0.00690039,
            0.0074751,
            0.00690039,
            0.00542804,
            0.00363852,
            0.00207836,
            0.00101164,
            0.00177106,
            0.00363852,
            0.00636986,
            0.00950272,
            0.0120803,
            0.0130865,
            0.0120803,
            0.00950272,
            0.00636986,
            0.00363852,
            0.00177106,
            0.00264211,
            0.00542804,
            0.00950272,
            0.0141764,
            0.0180217,
            0.0195227,
            0.0180217,
            0.0141764,
            0.00950272,
            0.00542804,
            0.00264211,
            0.00335878,
            0.00690039,
            0.0120803,
            0.0180217,
            0.0229101,
            0.0248182,
            0.0229101,
            0.0180217,
            0.0120803,
            0.00690039,
            0.00335878,
            0.00363852,
            0.0074751,
            0.0130865,
            0.0195227,
            0.0248182,
            0.0268852,
            0.0248182,
            0.0195227,
            0.0130865,
            0.0074751,
            0.00363852,
            0.00335878,
            0.00690039,
            0.0120803,
            0.0180217,
            0.0229101,
            0.0248182,
            0.0229101,
            0.0180217,
            0.0120803,
            0.00690039,
            0.00335878,
            0.00264211,
            0.00542804,
            0.00950272,
            0.0141764,
            0.0180217,
            0.0195227,
            0.0180217,
            0.0141764,
            0.00950272,
            0.00542804,
            0.00264211,
            0.00177106,
            0.00363852,
            0.00636986,
            0.00950272,
            0.0120803,
            0.0130865,
            0.0120803,
            0.00950272,
            0.00636986,
            0.00363852,
            0.00177106,
            0.00101164,
            0.00207836,
            0.00363852,
            0.00542804,
            0.00690039,
            0.0074751,
            0.00690039,
            0.00542804,
            0.00363852,
            0.00207836,
            0.00101164,
            0.00049242,
            0.00101164,
            0.00177106,
            0.00264211,
            0.00335878,
            0.00363852,
            0.00335878,
            0.00264211,
            0.00177106,
            0.00101164,
            0.00049242
        );

        vec4 blur3(vec2 uv)
        {
        	vec4 sum = vec4(0.0);
        	float fStepX = 1 / texSize.x * float(6);
            float fStepY = 1 / texSize.y * float(6);
        	vec2 Offset[9];
        	
        	Offset[0] = vec2(-fStepX, -fStepY); Offset[1] = vec2(0.0, -fStepY); Offset[2] = vec2(fStepX, -fStepY);
            Offset[3] = vec2(-fStepX, 0.0);     Offset[4] = vec2(0.0, 0.0);     Offset[5] = vec2(fStepX, 0.0);
            Offset[6] = vec2(-fStepX, fStepY);  Offset[7] = vec2(0.0, fStepY);  Offset[8] = vec2(fStepX, fStepY);
            
        	for (int i = 0; i < 9; i++)
            {
                sum += texture(TINY_TexColor, uv + Offset[i]);
            }
            
            return sum / 9.0f;
        }

        vec4 blur4(vec2 uv)
        {
        	vec4 sum = vec4(0.0);

            float fStepX = 1 / texSize.x;
            float fStepY = 1 / texSize.y;
            

            int length = 2* radius + 1;
            for(int y = -radius; y <= radius; y++)
            {
                for(int x = -radius; x <= radius; x++)
                {
                    myOffset[(x + radius) + (y + radius) * length] = vec2(fStepX * x, fStepY * y);
                }
            }

            for (int i = 0; i < kernelCount; i++)
            {
                sum += textureLod(TINY_TexColor, uv + myOffset[i], 4.0) * myFactor[i];
            }

            return sum;
        }

        void main()
        {
            //myFinalColor = blur2(myUV);
            //myFinalColor = blur1(myUV);
            
            myFinalColor = blur4(myUV);
            //myFinalColor = texture(TINY_TexColor, myUV, 4.0);
            //myFinalColor = vec4(0.0, 1.0, 0.0, 1.0);
        }
    }
    #TINY_FS_END
}
#TINY_PASS_END











