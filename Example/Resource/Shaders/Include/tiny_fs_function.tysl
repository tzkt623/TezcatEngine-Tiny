
//线性深度换算
float linearizeDepth(float depth, float near, float far) 
{
    float z = depth * 2.0 - 1.0; // back to NDC 
    return (2.0 * near * far) / (far + near - z * (far - near));    
}

//阴影计算
float calcShadow(vec4 lightPosition, vec3 normal, vec3 lightDir, sampler2D depthTex2D)
{
    // 执行透视除法
    vec3 projCoords = lightPosition.xyz / lightPosition.w;
    // 变换到[0,1]的范围
    projCoords = projCoords * 0.5 + 0.5;

    //超出投影的远平面范围
    if(projCoords.z > 1.0)
    {
        return 0.0;
    }

    // 取得最近点的深度(使用[0,1]范围下的lightPosition当坐标)
    float closestDepth = texture(depthTex2D, projCoords.xy).r; 
    // 取得当前片段在光源视角下的深度
    float currentDepth = projCoords.z;

    float bias = max(0.05 * (1.0 - dot(normal, lightDir)), 0.005);

    // 检查当前片段是否在阴影中
    //float shadow = currentDepth - bias > closestDepth  ? 1.0 : 0.0;

    // PCF
    float shadow = 0.0;
    vec2 texelSize = 1.0 / textureSize(depthTex2D, 0);
    for(int x = -1; x <= 1; ++x)
    {
        for(int y = -1; y <= 1; ++y)
        {
            float pcfDepth = texture(depthTex2D, projCoords.xy + vec2(x, y) * texelSize).r; 
            shadow += currentDepth - bias > pcfDepth  ? 1.0 : 0.0;        
        }    
    }
    shadow /= 9.0;

    return shadow;
}